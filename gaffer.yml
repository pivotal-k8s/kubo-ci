resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: bosh-errand
  type: docker-image
  source:
    repository: pcfkubo/bosh2-errand-resource
    tag: v0.1.3-dev

resources:
- name: gaffer-spec
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-ci
    branch: master
    paths: [ gaffer/gaffer.yml ]

- name: stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent

- name: git-kubo-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-deployment.git
    branch: develop
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-ci
    branch: master

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: gaffer-env/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: gaffer-env/creds.yml

- name: gcs-director.yml
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: gaffer-env/metadata # Named so because locks are called metadata

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz

- name: source-json
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: source.json

- name: gcs-load-balancer-vars
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: load-balancer-vars.yml

- name: cfcr-deployment
  type: bosh-deployment
  source:
    deployment: gaffer
    skip_check: true

- name: slack-alert
  type: slack-notification
  source:
    url: ((build-alert-slack-url))

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: k8s/config

- name: run-apply-addons-errand
  type: bosh-errand
  source:
    deployment: gaffer
    skip_check: true

- name: run-smoke-tests-errand
  type: bosh-errand
  source:
    deployment: gaffer
    skip_check: true

jobs:
- name: deploy-bosh
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
    - get: gcs-kubo-deployment-tarball
      trigger: true
    - get: gcs-kubo-release-tarball
      trigger: true
    - get: gcs-bosh-creds
    - get: gcs-director.yml
    - get: gcs-bosh-state
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball
    on_failure: &on_failure_alert
      do:
      - put: slack-alert
        params:
          text: |
            Updating gaffer failed <@cfcrteam>. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: update-bosh
    tags: [ gaffer ]
    file: git-kubo-ci/tasks/update-bosh.yml
    input_mapping: {kubo-lock: gcs-director.yml}
    params:
      GCP_SERVICE_ACCOUNT: ((gaffer-bosh-service-account))
      CLOUD_CONFIG_OPS_FILES: git-kubo-ci/manifests/ops-files/add-ephemeral-ip-cloud-config.yml
    on_failure: *on_failure_alert
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json
  - task: generate-load-balancer-vars
    file: git-kubo-ci/tasks/generate-load-balancer-vars.yml
    input_mapping: {kubo-lock: gcs-director.yml}
  - task: generate-source-json
    file: git-kubo-ci/tasks/generate-source-json.yml
    input_mapping: {kubo-lock: gcs-director.yml}
  - aggregate:
    - put: gcs-load-balancer-vars
      params:
        file: load-balancer-vars/vars.yml
    - put: source-json
      params:
        file: source-json/source.json
  - task: update-cloud-config-with-vm-ext
    params:
      DEPLOYMENT_NAME: gaffer
    tags: [ 'gaffer' ]
    file: git-kubo-ci/tasks/update-cloud-config-with-vm-ext.yml
    input_mapping: {kubo-lock: gcs-director.yml}

- name: deploy-k8s
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-kubo-deployment-tarball
      passed: [ deploy-bosh ]
      trigger: true
    - get: gcs-kubo-release-tarball
      passed: [ deploy-bosh ]
    - get: gcs-bosh-creds
      passed: [ deploy-bosh ]
    - get: gcs-director.yml
      passed: [ deploy-bosh ]
    - get: source-json
      passed: [ deploy-bosh ]
    - get: gcs-load-balancer-vars
      passed: [ deploy-bosh ]
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: gcs-kubo-deployment-tarball
    on_failure: *on_failure_alert
  - task: upload-stemcell
    tags: ['gaffer']
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: gcp
  - put: cfcr-deployment
    params:
      cleanup: true
      manifest: git-kubo-deployment/manifests/cfcr.yml
      ops_files:
      - git-kubo-ci/manifests/ops-files/kubo-latest-version.yml
      - git-kubo-deployment/manifests/ops-files/use-runtime-config-bosh-dns.yml
      - git-kubo-deployment/manifests/ops-files/allow-privileged-containers.yml
      - git-kubo-deployment/manifests/ops-files/iaas/gcp/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      - git-kubo-deployment/manifests/ops-files/misc/single-master.yml
      - git-kubo-deployment/manifests/ops-files/add-hostname-to-master-certificate.yml
      - git-kubo-ci/manifests/ops-files/scale-to-one-az.yml
      - git-kubo-deployment/manifests/ops-files/rename.yml
      - git-kubo-deployment/manifests/ops-files/vm-types.yml
      releases:
      - gcs-kubo-release-tarball/*.tgz
      source_file: source-json/source.json
      vars:
        deployment_name: gaffer
        worker_vm_type: worker
        master_vm_type: master
        apply_addons_vm_type: minimal
        worker_count: 3
        api-hostname: 35.201.123.45
      vars_files:
      - gcs-load-balancer-vars/load-balancer-vars.yml
      - gcs-director.yml/metadata
    tags: [gaffer]
    on_failure: *on_failure_alert
    on_success:
      do:
      - put: slack-alert
        params:
          text: |
            Updating gaffer succeeded. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: update-kubeconfig
    tags: [gaffer]
    file: git-kubo-ci/tasks/update-kubeconfig.yml
    input_mapping: {kubo-lock: gcs-director.yml}
    params:
      DEPLOYMENT_NAME: gaffer
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: [gaffer]
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [gaffer]
    on_failure: *on_failure_alert
  - aggregate:
    - put: gcs-kubeconfig
      params:
        file: kubeconfig/config

- name: deploy-gaffer
  plan:
  - get: git-kubo-ci
    resource: gaffer-spec
    trigger: true
  - get: gcs-kubeconfig
    passed: [ "deploy-k8s" ]
  - task: upgrade-gaffer
    config:
      platform: linux
      inputs:
      - name: git-kubo-ci
      - name: gcs-kubeconfig
      run:
        path: sh
        args:
          - -ec
          - KUBECONFIG="$PWD/gcs-kubeconfig/config" kubectl apply -f git-kubo-ci/gaffer/gaffer.yml
      image_resource:
        type: docker-image
        source:
          repository: pcfkubo/kubectl
          tag: stable
    on_failure: *on_failure_alert
