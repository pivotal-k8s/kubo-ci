<%
  env_list = %w(vsphere-lb gcp-lb aws-lb)
  stemcell_types = {
    'gcp' => 'google-kvm',
    'gcp-lb' => 'google-kvm',
    'vsphere' => 'vsphere-esxi',
    'vsphere-lb' => 'vsphere-esxi',
    'aws' => 'aws-xen-hvm',
    'aws-lb' => 'aws-xen-hvm',
    'openstack' => 'openstack-kvm'
  }
%>
---
resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: bosh-errand
  type: docker-image
  source:
    repository: pcfkubo/bosh2-errand-resource
    tag: v0.1.3-dev

resources:
<% env_list.each do |env| %>
- name: stemcell-<%= env %>
  type: bosh-io-stemcell
  source:
    name: bosh-<%= stemcell_types[env] %>-ubuntu-xenial-go_agent
<% end %>

- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

- name: git-kubo-deployment
  type: pull-request
  source:
    repo: cloudfoundry-incubator/kubo-deployment
    uri: git@github.com:cloudfoundry-incubator/kubo-deployment
    base: develop
    private_key: ((git-ssh-key.private_key))
    access_token: ((github-token-key))

<% env_list.each do |env| %>
- name: kubo-lock-<%= env %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-<%= env %>
<% end %>

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: source-json
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: source.json

- name: gcs-load-balancer-vars
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: load-balancer-vars.yml

- name: cfcr-deployment
  type: bosh-deployment
  source:
    deployment: ci-service
    skip_check: true

- name: run-apply-addons-errand
  type: bosh-errand
  source:
    deployment: ci-service
    skip_check: true

- name: run-smoke-tests-errand
  type: bosh-errand
  source:
    deployment: ci-service
    skip_check: true

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: k8s/config

jobs:
- name: run-unit-tests
  plan:
  - get: git-kubo-ci
  - get: git-kubo-deployment
    version: every
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: run-deployment-unit-tests
    file: git-kubo-ci/tasks/run-deployment-unit-tests.yml
    on_failure:
      put: git-kubo-deployment
      params:
        path: git-kubo-deployment
        status: failure

<% env_list.each do |env| %>
- name: claim-lock-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-deployment
      passed: ['run-unit-tests' ]
      version: every
      trigger: true
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - put: kubo-lock-<%= env %>
    params: { acquire: true }

- name: install-bosh-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'claim-lock-<%= env %>' ]
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= env %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: install
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      <% if env.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif env =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
      <% elsif env.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
    on_failure: &on_failure_<%= env %>
      aggregate:
      - put: git-kubo-deployment
        params:
          path: git-kubo-deployment
          status: failure
      - do:
        - task: cleanup-<%= env %>
          tags: [<%= env %>]
          file: git-kubo-ci/tasks/cleanup-<%= env.split('-').first %>-environment.yml
          params:
            ENV_FILE: kubo-lock/metadata
        - put: kubo-lock-<%= env %>
          params: { release: kubo-lock }
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json
  - task: generate-load-balancer-vars
    file: git-kubo-ci/tasks/generate-load-balancer-vars.yml
  - task: generate-source-json
    file: git-kubo-ci/tasks/generate-source-json.yml
  - aggregate:
    - put: gcs-load-balancer-vars
      params:
        file: load-balancer-vars/vars.yml
    - put: source-json
      params:
        file: source-json/source.json
  - task: update-cloud-config-with-vm-ext
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-cloud-config-with-vm-ext.yml
    on_failure: *on_failure_<%= env %>

- name: deploy-k8s-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'install-bosh-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-kubo-release-tarball
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-<%= env %>' ]
    - get: source-json
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'install-bosh-<%= env %>' ]
    - get: stemcell
      resource: stemcell-<%= env %>
  <% if env =~ /^vsphere/ %>
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  <% end %>
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - put: cfcr-deployment
    params:
      manifest: git-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      no_redact: true
      ops_files:
      - git-kubo-ci/manifests/ops-files/kubo-latest-version.yml
      - git-kubo-deployment/manifests/ops-files/misc/bootstrap.yml
      - git-kubo-deployment/manifests/ops-files/use-runtime-config-bosh-dns.yml
      - git-kubo-deployment/manifests/ops-files/allow-privileged-containers.yml
      - git-kubo-deployment/manifests/ops-files/addons-spec.yml
      - git-kubo-deployment/manifests/ops-files/enable-nfs.yml
      - git-kubo-ci/manifests/ops-files/add-hpa-properties.yml
      <% if env =~ /^gcp/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/gcp/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/gcp/add-subnetwork-for-internal-load-balancer.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      <% end %>
      <% if env =~ /^aws/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/aws/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/aws/lb.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      <% end %>
      <% if env =~ /^openstack/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/openstack/cloud-provider.yml
      <% end %>
      <% if env =~ /^vsphere/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/use-vm-extensions.yml
      <% end %>
      var_files:
        addons-spec: "/tmp/build/put/git-kubo-ci/specs/guestbook.yml"
      vars_files:
      - gcs-load-balancer-vars/load-balancer-vars.yml
      - kubo-lock/metadata
      <% if env =~ /^vsphere/ %>
      - director_uuid/var.yml
      <% end %>
      stemcells:
      - stemcell/stemcell.tgz
      releases:
      - gcs-kubo-release-tarball/*.tgz
      source_file: source-json/source.json
      vars:
        deployment_name: ci-service
        worker_count: 3
    tags: [<%= env %>]
    on_failure: *on_failure_<%= env %>
  - task: update-kubeconfig
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-kubeconfig.yml
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_<%= env %>
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_<%= env %>
  - put: gcs-kubeconfig
    params:
      file: kubeconfig/config

- name: run-k8s-integration-tests-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: source-json
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-k8s-<%= env %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: integration-tests
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/run-k8s-integration-tests.yml
    on_failure: *on_failure_<%= env %>
    params:
      DEPLOYMENT_NAME: ci-service
      ENABLE_ADDONS_TESTS: true
      ENABLE_API_EXTENSIONS_TESTS: true
      ENABLE_CERTIFICATE_TESTS: true
      ENABLE_GENERIC_TESTS: true
      ENABLE_PERSISTENT_VOLUME_TESTS: true
      <% if env =~ /^(vsphere|openstack)/ %>
      ENABLE_K8S_LBS_TESTS: false
      <% end %>

- name: destroy-k8s-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'run-k8s-integration-tests-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'run-k8s-integration-tests-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'run-k8s-integration-tests-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'run-k8s-integration-tests-<%= env %>' ]
    - get: source-json
      passed: [ 'run-k8s-integration-tests-<%= env %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: destroy-k8s
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    on_failure: *on_failure_<%= env %>

- name: destroy-bosh-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-<%= env %>' ]
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-<%= env %>' ]
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: pending
  - task: destroy
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    on_failure: *on_failure_<%= env %>
  - put: kubo-lock-<%= env %>
    params: { release: kubo-lock }
<% end %>

- name: success-notification
  plan:
  - get: git-kubo-deployment
    passed: <%= env_list.collect { |env| "destroy-bosh-#{env}" } %>
    trigger: true
  - get: git-kubo-ci
  - put: git-kubo-deployment
    params:
      path: git-kubo-deployment
      status: success
